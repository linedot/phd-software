#include <gem5/m5ops.h>


#include <iostream>
#include <cstdint>
#include <cstdlib>
#include <cmath>
#include <string>
#include <vector>


enum class mem_use
{
    SAMEDATA,
    L1,
    CONTIGUOUS
};

$GETSIMDSIZE

int main(int argc, char* argv[])
{
    if (2 != argc)
    {
        return -1;
    }

    std::uint64_t measurements = 8;
    std::uint64_t iterations = std::stoull(argv[1]);

    std::vector<$DT> adata;
    std::vector<$DT> bdata;
    std::vector<$DT> cdata;

    constexpr auto mu = mem_use::$MEM;
    switch(mu)
    {
    case mem_use::SAMEDATA:
        adata.resize(get_simd_size()/sizeof($DT));
        bdata.resize(get_simd_size()/sizeof($DT));
        cdata.resize(get_simd_size()/sizeof($DT));
        break;
    // TODO: implement L1-bound calculations (also in the generator)
    case mem_use::L1:
    case mem_use::CONTIGUOUS:
        // TODO: This is for SVE on A64FX
        adata.resize(get_simd_size()/sizeof($DT)*$VECINMR*iterations*$UNROLL);
        bdata.resize($NR*iterations*$UNROLL);
        cdata.resize(get_simd_size()/sizeof($DT)*$VECINMR*$NR);
        break;
    }
    
    $DT * a = adata.data();
    $DT * b = bdata.data();
    $DT * c = bdata.data();

    auto flops = get_simd_size()/sizeof($DT)*2.0*static_cast<double>($VECINMR*$NR*$UNROLL)*iterations+3.0*$NR*$VECINMR;

    std::cout << "kernel size: $MR x $NR\n";
    std::cout << "data type: $DT\n";
    std::cout << "Unroll: $UNROLL\n";
    std::cout << "k_c: " << iterations*$UNROLL << "\n";
    std::cout << "Number of FLOPS per measurement: " << flops << "\n";

    for(std::size_t i = 0; i < measurements; i++)
    {
        m5_work_begin(0,0);
        __asm__ volatile (
                $GEMM
                );
        m5_work_end(0,0);
    }
    return 0;
}
